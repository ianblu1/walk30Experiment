
def autoflagDeliveredMessages
  dms = self.deliveredMessages
  dms.zip(dms.map{|m| m.sent_at}[1..dms.length]<<DateTime.now).each do |dm,t|
    if dm.flag.is_a? NilClass
      rms = self.messagesReceivedBetweenTimes(dm.sent_at,t)
      if rms.map{|m| m.flagPositive?}.reduce(:&)
        dm.flagPositive
      elsif rms.map{|m| m.flagNegative?}.reduce(:&)
        dm.flagNegative
      elsif rms.map{|m| m.flagNeutral?}.reduce(:&) or rms.length == 0 
        dm.flagNeutral
      end
    end
  end
end

def messagesReceivedBetweenTimes(t1,t2)
  return self.receivedMessages.select {|m| m.sent_at and m.sent_at> self.sent_at}
end  

def unflaggedMessages
  return self.messages.select {|message| not message.flagged?}
end

def messagesUnflaggedOrChangedWithinNSeconds(n)
  return self.messages.select {|message| not message.flagged? or message.secondsSinceLastUpdate < n}    
end

